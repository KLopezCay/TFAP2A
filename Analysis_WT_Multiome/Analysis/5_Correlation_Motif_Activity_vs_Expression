# Adapted from https://github.com/p4rkerw/Muto_Wilson_NComm_2020/blob/master/analysis/corr_chromVar_TF_exp.R
# Muto et al, 2020
# & https://github.com/lmsgerhardt/Gerhardt_JASN_2022/blob/main/Subclustering_Analysis/Correlation_GEX_Motifactivity.R
# Gerhardt et al, 2023

library(Seurat)
library(Signac)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(limma)

set.seed(1234)

################################## correlate chromVAR transcription factor activity with TF expression ###########################

# Load data
Ki67 <- readRDS("Ki67_RNA_ATAC_motifs_chromvar_new.Rds")
DefaultAssay(Ki67) <- "chromvar"

# create a data frame of motifs and corresponding gene names
motifs <- Ki67@assays$ATAC@motifs@motif.names
 
# create a data frame of motifs and corresponding gene names
motif_names <- data.frame(genes=unlist(motifs)) %>%
  rownames_to_column(var="motif") %>%
  arrange(genes)

# format the motif_names df so each motif corresponds to a single gene
# the JASPAR database has multiple genes associated with each motif separated by "::"
motif_names <- distinct(motif_names) %>% #subset unique rows
  arrange(genes) %>%
  dplyr::filter(!str_detect(genes, pattern="::"))%>%
  dplyr::filter(!str_detect(genes, pattern="var.")) %>% # remove any genes associated with multiple variants
  as.data.frame()

# fix the one occurrence of EWSR1-FLI1 and replace Tfap2a motif with more common variant2 motif
motif_names$genes <- str_replace(motif_names$genes, pattern="EWSR1-FLI1", replacement="EWSR1")
motif_names$motif <- str_replace(motif_names$motif, pattern="MA0003.4", replacement="MA0810.1")

#Make Motif names lower case to be compatible with gene annotation
motif_names$genes <-paste0(substr(motif_names$genes,1,1),tolower(substr(motif_names$genes,2,nchar(motif_names$genes)))) 

# Remove gene names not present in RNA assay
DefaultAssay(Ki67) <- "RNA"
genes <- motif_names$genes
a <- genes %in% rownames(GetAssayData(Ki67))
a <- as.character(a)
b <- data.frame(genes, a)
library(plyr)
motif_names <- join(motif_names, b, by = "genes")
c <- subset(motif_names, a == 'TRUE')

# use the findmarkers function to calculate gene expression and activity for every motif-gene combination
motif.ls = motif_names$motif

df.ls <- lapply(motif.ls, function(motif) {
  print(motif)
  gene <- motif_names[motif_names$motif == motif,]$genes
  print(gene)
  DefaultAssay(Ki67) <- "chromvar"
  aver_chromvar <- FindAllMarkers(
    object = Ki67,
    only.pos = FALSE,
    features=motif,
    test.use = 'LR',
    min.pct = 0,
    mean.fxn = rowMeans,
    logfc.threshold = 0 #find all cluster-specific motifs
  )
  # compute the average expression from the rna assay
  DefaultAssay(Ki67) <- "RNA"
  Ki67 <- NormalizeData(Ki67)
  aver_exp <- FindAllMarkers(Ki67, assays="RNA",min.pct=0, logfc.threshold=0, features=gene, verbose=FALSE, only.pos = FALSE)
  
  # join the matrices and return null if gene expression is not detected for all cell types
  mat <- tryCatch(full_join(aver_chromvar, aver_exp, by = "cluster"),
                  error=function(e) NULL)
  if(!is.null(mat)) {
    df <- data.frame(chromvar=mat$avg_log2FC.x, rna=mat$avg_log2FC.y, celltype=mat$cluster,
                     motif=mat$gene.x, gene=mat$gene.y, chrom_pval=mat$p_val_adj.x, gene_pval=mat$p_val_adj.y)
  } else {
    return(NULL)
  }
})


# aggregate the motif-gene df
df <- bind_rows(df.ls)
df <- dplyr::arrange(df, gene, motif)
write.csv(df, file = "./Ki67_chromVar_GEX_broad_celltypes.csv", row.names = F)

# filter the motif-gene df for pairs with significant changes in gene expression and chromvar activity
df.f <- dplyr::filter(df, chrom_pval < 0.05, gene_pval < 0.05)
df.f <- na.omit(df.f)

# create a column for each unique gene-motif combo
df.f <- dplyr::mutate(df.f, gene_motif = paste0(gene,"_",motif))

# compute a pearson r2 and pval for each motif-gene combo across all celltypes
combos <- unique(df.f$gene_motif)
library(ggpmisc)
df.pearson <- lapply(combos, function(combo) {
  require(ggrepel)
  
  df <- dplyr::filter(df.f, gene_motif == combo)
  max_exp <- max(abs(df$rna), na.rm=TRUE) + 1
  max_chrom <- max(abs(df$chromvar), na.rm=TRUE) + 1
  pearson <- tryCatch(cor.test(df$chromvar, df$rna, method="pearson", conf.level=0.95), error=function(e) NULL)
  df$corr <- tryCatch(signif(pearson$estimate,2), error=function(e) NULL)
  df$pval <- tryCatch(signif(pearson$p.value,2), error=function(e) NULL)
  df$max_exp <- max_exp
  df$max_chrom <-max_chrom
  df$num_celltypes <- length(unique(df$celltype))
  return(df)
})

# aggregate a final df with all the available pearson R2 coefficients and pvals
df.final <- bind_rows(df.pearson)
df.final <- dplyr::distinct(df.final, celltype, gene_motif, .keep_all = TRUE)
df.sig <- dplyr::filter(df.final, pval < 0.05) %>%
  arrange(-num_celltypes, -corr)

# Save
# SUPPLEMENTARY TABLE S4
write.csv(df.final, file = "./Ki67_Correlation_chromVar_GEX_broad_celltypes.csv", row.names = F)


# identify TF that are significantly correlated with their chromvar activity
sig_pairs <- unique(df.sig$gene_motif)
total_pairs <- unique(df.final$gene_motif)

# Plot correlation for Tfap2a
# FIGURE 2B
gene_motif <- df.final$gene_motif[grepl("Tfap2a", df.final$gene_motif)]
toplot <- dplyr::filter(df.final, motif == "MA0810.1")
max_chrom <- unique(toplot$max_chrom)
max_exp <- unique(toplot$max_exp)
p4 <- ggplot(toplot, aes(x=chromvar, y=rna)) +
  geom_smooth(method="lm", color = "darkgray") +
  geom_point(aes(color=celltype)) +
  scale_color_manual(values = c("#B0C5DE", #PT
                                "#668b94", #TAL
                                "#7F2350", #DCT/CNT
                                "#501444", #CNT
                                "#2F1437", #CD-PC
                                "#81bdb5" #IntC
                               )) +
  geom_text_repel(aes(label=celltype)) +
  xlab("chromVAR activity (avg_logFC)") +
  ylab("Gene expression (avg_logFC)") +
  ggtitle(unique(toplot$gene), subtitle=paste0("Pearson r^2=",unique(toplot$cor)," pval=",unique(toplot$pval))) +
  xlim(c(-max_chrom,max_chrom)) +
  ylim(c(-max_exp,max_exp)) +
  theme_minimal() +
  geom_hline(yintercept=0) +
  geom_vline(xintercept=0) 
p4

# Plot correlation for Tfap2b
# FIGURE 2C
gene_motif <- df.final$gene_motif[grepl("Tfap2b", df.final$gene_motif)]
toplot <- dplyr::filter(df.final, motif == "MA0811.1")
max_chrom <- unique(toplot$max_chrom)
max_exp <- unique(toplot$max_exp)
p5 <- ggplot(toplot, aes(x=chromvar, y=rna)) +
  geom_smooth(method="lm", color = "darkgray") +
  geom_point(aes(color=celltype)) +
  scale_color_manual(values = c("#B0C5DE", #PT
                                "#668b94", #TAL
                                "#7F2350", #DCT/CNT
                                "#501444", #CNT
                                "#C9987B", #CD-IC
                                "#4d716c", #EC
                                "#2F1437", #CD-PC
                                "#81bdb5"  #IntC
  )) +
  geom_text_repel(aes(label=celltype)) +
  xlab("chromVAR activity (avg_logFC)") +
  ylab("Gene expression (avg_logFC)") +
  ggtitle(unique(toplot$gene), subtitle=paste0("Pearson r^2=",unique(toplot$cor)," pval=",unique(toplot$pval))) +
  xlim(c(-max_chrom,max_chrom)) +
  ylim(c(-max_exp,max_exp)) +
  theme_minimal() +
  geom_hline(yintercept=0) +
  geom_vline(xintercept=0) 
p5







